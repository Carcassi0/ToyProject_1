import 'dart:core';
import 'dart:async';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:geocoding/geocoding.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';

Future<String?> _getUserLocation() async {
  final user = FirebaseAuth.instance.currentUser;
  final email = user?.email;
  final firebaseInstance = FirebaseFirestore.instance;
  final snapshot = await firebaseInstance.collection('users').where('email', isEqualTo: email).get();

  if (snapshot.docs.isNotEmpty){
    final storeCode = snapshot.docs.first['store code'];
    return storeCode as String?;
  } else {
    return 'Unknown User';
  }
}

Future<List<double>> convertAddressToCoordinates(String address) async {
  try {
    final geocodingPlatform = GeocodingPlatform.instance;
    if (geocodingPlatform != null) {
      final locations = await geocodingPlatform.locationFromAddress(address);
      final latitude = locations.isNotEmpty ? locations[0].latitude : 0.0;
      final longitude = locations.isNotEmpty ? locations[0].longitude : 0.0;
      return [latitude, longitude];
    } else {
      print('Error: GeocodingPlatform.instance is null');
      return [0.0, 0.0]; // 기본값 반환
    }
  } catch (e) {
    print('Error: GeoCoding');
    return [0.0, 0.0]; // 예외 발생 시 기본값 반환
  }
}

Future<LatLng> setUserLocation() async {

  late double longitude = 0.0;
  late double latitude = 0.0;

  Map<String, List> data = {
    'SZA0000834':[37.4747513800637, 126.88491691693] , 'SZA0001000':[37.5229076879049, 126.883516835301], 'SZH0000008':[37.2432787984659, 127.02854330522], 'SZH0000742':[37.2854355056308, 127.006639539149], 'SZA0000924':[37.5597176740691, 127.012651919066],'1001085792':[37.2662801304726, 127.03325084018],
    '1100018005': [37.2590570333271, 127.045166664033], 'SAH0000209': [37.2749895718785, 127.044559088435], '1001092643':[37.2791599879165, 127.003600149552], '1000047134': [37.2396174558001, 127.056305206854], '1100024984':[37.2514017455038, 127.074607377119], '1000028448': [37.2638843015003, 127.03310232868],
    '1100016568':[37.2651763237044, 127.001840665609], '1000032811': [37.2642509299937, 127.032471617692], '1001350224':[37.2983941020762, 127.069966561536], 'SZH0000260': [37.2505144677203, 127.019638678088], 'SZH0000637': [37.2963500230486, 127.046954360227], '1001525827': [37.1933464602282, 127.073633628094],
    '1000032809': [37.2520637842978, 127.07102269696], 'SAH0000229': [37.300829131314, 127.045194789719], 'SZH0000778': [37.2672374575427, 127.030691711374], 'SAH0000343': [37.2740508068551, 126.954334928999], '1100002601': [37.2965475849533, 126.982867834997], 'SAH0000305': [37.2734344577539, 127.001849773878],
    'SAH0000237': [37.2595870615283, 126.962694753114], 'SAH0000172':[37.2685232453727, 127.004921098123], 'SAH0000091':[37.2672307859769, 127.002037109722], '1000032804': [37.083180374496, 126.817823513498], '1000075971': [37.2670829046912, 127.002994496957], '1001247918': [37.2671782622018, 127.001582087602],
    '1100014696': [37.2921573223499, 127.050652669552], 'SAH0000257': [37.278802138458, 127.044089895256], 'SAH0000249': [37.2751588348255, 126.974895337457], '1100015377': [37.2656312163671, 127.033829691004], 'SAH0000130': [37.2983830390529, 126.971048236442], 'SAH0000295': [37.2551861685466, 127.025478585109],
    'SAH0000312': [37.2658242366314, 127.015630515602], 'SAH0000293': [37.3021366951623, 127.00922880939], 'SAH0000221': [37.2588172261055, 127.042348432561], 'SZH0000354': [37.2638567482406, 127.03335698624], 'SZH0000634': [37.2744053347516, 126.955915600539], '1100025861': [37.2789190140363, 126.999670859338],
    '1100013770': [37.2735010149489, 126.941851927412], '1100031596': [37.2751704063691, 127.022207943796], '1100014731': [37.3015564697509, 127.008673126049], '1000035082': [37.2896793961548, 127.013916659265], 'SAH0000178': [37.2960611061087, 126.983438743129], 'SAH0000174': [37.2671782622018, 127.001582087602],
    '1100010807': [37.2899546684169, 127.000704389445], '1100012614': [37.2959921536738, 126.993282953138], '1100019363': [37.2390327443666, 127.030224744669], 'SAH0000257': [37.278802138458, 127.044089895256], 'SZH0000265': [37.2627570803461, 127.030130394758], 'SZH0000183': [0.0, 0.0], 'SZH0000382': [37.28262996578, 126.97014551047],
    '1100023893': [37.246768985838, 127.060811491707], '1001426262': [37.2527867453235, 127.073445707754], 'SAH0000243': [37.2451815599677, 127.055799794469], '1100034354': [37.2948042621845, 126.993954222808], 'SAH0000240': [37.2509430636025, 127.035002586497], 'SZH0000267': [37.2518163005629, 127.072602539897],
    'SZH0000268': [37.3027673624559, 127.008809068617], 'SZH0000266': [37.2460729860148, 127.048594623957], '1100000933': [37.2920091156445, 127.01143496722], '1100009032': [37.2730351016277, 127.051084989687], '1100009109': [37.262601378213, 127.024254427563]
  };

  String? storeCode = await _getUserLocation();

  if (storeCode != null && data.containsKey(storeCode)) {
    List? storeCodeList = data[storeCode];
    final coordinates = storeCodeList;
    if (coordinates!.isNotEmpty) {
      longitude = coordinates[1];
      latitude = coordinates[0];
    }
    return LatLng(latitude, longitude);
  } else {
    print("internal error");
    return LatLng(0, 0);
  }
}